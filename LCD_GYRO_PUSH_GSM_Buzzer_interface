#include "I2Cdev.h"
#include <LiquidCrystal.h>
LiquidCrystal lcd(8, 9, 10, 11, 12, 13);
#include "MPU6050_6Axis_MotionApps20.h"
#include "MPU6050.h" // not necessary if using MotionApps include file
#include "Wire.h"
#include <SoftwareSerial.h>
SoftwareSerial gsm(5, 4); // 5 Rx, 4 Tx

// class default I2C address is 0x68
// specific I2C addresses may be passed as a parameter here
// AD0 low = 0x68 (default for SparkFun breakout and InvenSense evaluation board)
// AD0 high = 0x69
MPU6050 mpu;
//MPU6050 mpu(0x69); // <-- use for AD0 high

/* =========================================================================
   NOTE: In addition to connection 3.3v, GND, SDA, and SCL, this sketch
   depends on the MPU-6050's INT pin being connected to the Arduino's
   external interrupt #0 pin. On the Arduino Uno and Mega 2560, this is
   digital I/O pin 2.
   ========================================================================= */


// uncomment "OUTPUT_READABLE_QUATERNION" if you want to see the actual
// quaternion components in a [w, x, y, z] format (not best for parsing
// on a remote host such as Processing or something though)
//#define OUTPUT_READABLE_QUATERNION

// uncomment "OUTPUT_READABLE_EULER" if you want to see Euler angles
// (in degrees) calculated from the quaternions coming from the FIFO.
// Note that Euler angles suffer from gimbal lock (for more info, see
// http://en.wikipedia.org/wiki/Gimbal_lock)
//#define OUTPUT_READABLE_EULER

// uncomment "OUTPUT_READABLE_YAWPITCHROLL" if you want to see the yaw/
// pitch/roll angles (in degrees) calculated from the quaternions coming
// from the FIFO. Note this also requires gravity vector calculations.
// Also note that yaw/pitch/roll angles suffer from gimbal lock (for
// more info, see: http://en.wikipedia.org/wiki/Gimbal_lock)
#define OUTPUT_READABLE_YAWPITCHROLL

// uncomment "OUTPUT_READABLE_REALACCEL" if you want to see acceleration
// components with gravity removed. This acceleration reference frame is
// not compensated for orientation, so +X is always +X according to the
// sensor, just without the effects of gravity. If you want acceleration
// compensated for orientation, us OUTPUT_READABLE_WORLDACCEL instead.
//#define OUTPUT_READABLE_REALACCEL

// uncomment "OUTPUT_READABLE_WORLDACCEL" if you want to see acceleration
// components with gravity removed and adjusted for the world frame of
// reference (yaw is relative to initial orientation, since no magnetometer
// is present in this case). Could be quite handy in some cases.
//#define OUTPUT_READABLE_WORLDACCEL

// uncomment "OUTPUT_TEAPOT" if you want output that matches the
// format used for the InvenSense teapot demo
//#define OUTPUT_TEAPOT



#define INTERRUPT_PIN 2  // use pin 2 on Arduino Uno & most boards
#define LED_PIN 13 // (Arduino is 13, Teensy is 11, Teensy++ is 6)
bool blinkState = false;
// constants won't change. They're used here to set pin numbers:
const int inc_speed = A0;    // the number of the pushbutton1 pin
const int dec_speed = A1;
const int Buzzer = A2;
int Speed = 0;

// the following variables are unsigned longs because the time, measured in
// milliseconds, will quickly become a bigger number than can be stored in an int.
unsigned long lastIncDebounceTime = 0;  // the last time the output pin was toggled
unsigned long debounceDelay = 100;    // the debounce time; increase if the output flickers

// MPU control/status vars
bool dmpReady = false;  // set true if DMP init was successful
uint8_t mpuIntStatus;   // holds actual interrupt status byte from MPU
uint8_t devStatus;      // return status after each device operation (0 = success, !0 = error)
uint16_t packetSize;    // expected DMP packet size (default is 42 bytes)
uint16_t fifoCount;     // count of all bytes currently in FIFO
uint8_t fifoBuffer[64]; // FIFO storage buffer
float Accident_detect_range = 40 * M_PI / 180;

// orientation/motion vars
Quaternion q;           // [w, x, y, z]         quaternion container
VectorInt16 aa;         // [x, y, z]            accel sensor measurements
VectorInt16 aaReal;     // [x, y, z]            gravity-free accel sensor measurements
VectorInt16 aaWorld;    // [x, y, z]            world-frame accel sensor measurements
VectorFloat gravity;    // [x, y, z]            gravity vector
float euler[3];         // [psi, theta, phi]    Euler angle container
float ypr[3];           // [yaw, pitch, roll]   yaw/pitch/roll container and gravity vector

// packet structure for InvenSense teapot demo
uint8_t teapotPacket[14] = { '$', 0x02, 0, 0, 0, 0, 0, 0, 0, 0, 0x00, 0x00, '\r', '\n' };



// ================================================================
// ===               INTERRUPT DETECTION ROUTINE                ===
// ================================================================

volatile bool mpuInterrupt = false;     // indicates whether MPU interrupt pin has gone high
void dmpDataReady() {
  mpuInterrupt = true;
}


// ================================================================
// ===                      INITIAL SETUP                       ===
// ================================================================

void setup() {
  lcd.begin(16, 2);
  lcd.clear();
  gsm.begin(9600);
  pinMode(inc_speed, INPUT);
  pinMode(dec_speed, INPUT);
  pinMode(Buzzer, OUTPUT);
  lcd_init();
  init_i2c();
  init_dmp();

  lastIncDebounceTime = millis();
  // configure LED for output
  pinMode(LED_PIN, OUTPUT);
  lcd.setCursor(0, 1);
  lcd.print("ENGINE ON");
  delay(2000);
}

// ================================================================
// ===                    MAIN PROGRAM LOOP                     ===
// ================================================================

void loop() {
  // read the state of the switch into a local variable:
  int inc_pin = digitalRead(inc_speed);
  int dec_pin = digitalRead(dec_speed);
  /*
    if(inc_pin) {
      count += 10;
    } else if(dec_pin) {
      count -= 10;
    }*/
  if ((millis() - lastIncDebounceTime) > debounceDelay) {
    // whatever the reading is at, it's been there for longer than the debounce
    // delay, so take it as the actual current state:
    if (inc_pin && Speed < 150) {
      Speed += 10;
    } else if (dec_pin && (Speed >= 10)) {
      Speed -= 10;
    }
    lastIncDebounceTime = millis();
  }

  lcd.setCursor(0, 1);
  lcd.print("SPEED :    ");
  lcd.setCursor(8, 1);
  lcd.print(Speed);

  // if programming failed, don't try to do anything
  if (!dmpReady) return;

  // wait for MPU interrupt or extra packet(s) available
  while (!mpuInterrupt && fifoCount < packetSize);

  // reset interrupt flag and get INT_STATUS byte
  mpuInterrupt = false;
  mpuIntStatus = mpu.getIntStatus();

  // get current FIFO count
  fifoCount = mpu.getFIFOCount();

  // check for overflow (this should never happen unless our code is too inefficient)
  if ((mpuIntStatus & 0x10) || fifoCount == 1024) {
    // reset so we can continue cleanly
    mpu.resetFIFO();
    Serial.println(F("FIFO overflow!"));

    // otherwise, check for DMP data ready interrupt (this should happen frequently)
  } else if (mpuIntStatus & 0x02) {
    // wait for correct available data length, should be a VERY short wait
    while (fifoCount < packetSize) fifoCount = mpu.getFIFOCount();

    // read a packet from FIFO
    mpu.getFIFOBytes(fifoBuffer, packetSize);

    // track FIFO count here in case there is > 1 packet available
    // (this lets us immediately read more without waiting for an interrupt)
    fifoCount -= packetSize;

#ifdef OUTPUT_READABLE_QUATERNION
    // display quaternion values in easy matrix form: w x y z
    mpu.dmpGetQuaternion(&q, fifoBuffer);
    Serial.print("quat\t");
    Serial.print(q.w);
    Serial.print("\t");
    Serial.print(q.x);
    Serial.print("\t");
    Serial.print(q.y);
    Serial.print("\t");
    Serial.println(q.z);
#endif

#ifdef OUTPUT_READABLE_EULER
    // display Euler angles in degrees
    mpu.dmpGetQuaternion(&q, fifoBuffer);
    mpu.dmpGetEuler(euler, &q);
    Serial.print("euler\t");
    Serial.print(euler[0] * 180 / M_PI);
    Serial.print("\t");
    Serial.print(euler[1] * 180 / M_PI);
    Serial.print("\t");
    Serial.println(euler[2] * 180 / M_PI);
#endif

#ifdef OUTPUT_READABLE_YAWPITCHROLL
    // display Euler angles in degrees
    mpu.dmpGetQuaternion(&q, fifoBuffer);
    mpu.dmpGetGravity(&gravity, &q);
    mpu.dmpGetYawPitchRoll(ypr, &q, &gravity);
    Serial.print("ypr\t");
    Serial.print(ypr[0] * 180 / M_PI);
    Serial.print("\t");
    Serial.print(ypr[1] * 180 / M_PI);
    Serial.print("\t");
    Serial.println(ypr[2] * 180 / M_PI);
#endif

#ifdef OUTPUT_READABLE_REALACCEL
    // display real acceleration, adjusted to remove gravity
    mpu.dmpGetQuaternion(&q, fifoBuffer);
    mpu.dmpGetAccel(&aa, fifoBuffer);
    mpu.dmpGetGravity(&gravity, &q);
    mpu.dmpGetLinearAccel(&aaReal, &aa, &gravity);
    Serial.print("areal\t");
    Serial.print(aaReal.x);
    Serial.print("\t");
    Serial.print(aaReal.y);
    Serial.print("\t");
    Serial.println(aaReal.z);
#endif

#ifdef OUTPUT_READABLE_WORLDACCEL
    // display initial world-frame acceleration, adjusted to remove gravity
    // and rotated based on known orientation from quaternion
    mpu.dmpGetQuaternion(&q, fifoBuffer);
    mpu.dmpGetAccel(&aa, fifoBuffer);
    mpu.dmpGetGravity(&gravity, &q);
    mpu.dmpGetLinearAccel(&aaReal, &aa, &gravity);
    mpu.dmpGetLinearAccelInWorld(&aaWorld, &aaReal, &q);
    Serial.print("aworld\t");
    Serial.print(aaWorld.x);
    Serial.print("\t");
    Serial.print(aaWorld.y);
    Serial.print("\t");
    Serial.println(aaWorld.z);
#endif

#ifdef OUTPUT_TEAPOT
    // display quaternion values in InvenSense Teapot demo format:
    teapotPacket[2] = fifoBuffer[0];
    teapotPacket[3] = fifoBuffer[1];
    teapotPacket[4] = fifoBuffer[4];
    teapotPacket[5] = fifoBuffer[5];
    teapotPacket[6] = fifoBuffer[8];
    teapotPacket[7] = fifoBuffer[9];
    teapotPacket[8] = fifoBuffer[12];
    teapotPacket[9] = fifoBuffer[13];
    Serial.write(teapotPacket, 14);
    teapotPacket[11]++; // packetCount, loops at 0xFF on purpose
#endif

    // blink LED to indicate activity
    blinkState = !blinkState;
    digitalWrite(LED_PIN, blinkState);
    //    lcd.setCursor(0, 1);
    //    lcd.print(Accident_detect_range);
    if ((ypr[1] >= Accident_detect_range || ypr[1] <= -Accident_detect_range || ypr[2] >= Accident_detect_range || ypr[2] <= -Accident_detect_range) && Speed) {
      digitalWrite(Buzzer, HIGH);
      for (int i = 0; i < 3; i++)
      {
        lcd.clear();
        //lcd.setCursor(0, 0);
        //lcd_print(0, 0, "VEHICLE MET WITH", 0);
        lcd.print("VEHICLE MET WITH");
        //lcd_print(0, 1, "  AN ACCIDENT  ", 3000);
        lcd.setCursor(0, 1);
        lcd.print("  AN ACCIDENT  ");
        delay(3000);
        lcd.clear();
        lcd.setCursor(0, 0);
        //lcd_print(0, 0, "PRESS RST BUTTON", 0);
        //lcd_print(0, 1, "IF YOU ARE SAFE", 3000);
        lcd.print("PRESS RST BUTTON");
        lcd.setCursor(0, 1);
        lcd.print("IF YOU ARE SAFE");
        delay(3000);
      }
      delay(1000);
      digitalWrite(Buzzer, LOW);
      lcd.clear();
      //lcd.setCursor(0, 0);
      lcd.print("   EMERGENCY   ");
      lcd.setCursor(0, 1);
      lcd.print("RESCUE ACTIVATE");
      delay(3000);
      send_gsm_message("918431826967");
      delay(2000);
      //send_gsm_message("918105531029");
      lcd.clear();
      //lcd.setCursor(0, 0);
      lcd.print("HAVE A SAFE RIDE");
      delay(100);
      Speed = 0;
    }
    //lcd_print(0, 1, " lcd_print func ", 500);
    // delay(500);
  }
}

/*
  void lcd_print(int cur, int line, String message, int duration) {
  lcd.setCursor(cur, line);
  lcd.print(message);
  if (duration) {
    delay(duration);
  }
  } */

void lcd_init()
{
  Serial.println(F("Initializing LCD display..."));
  lcd.setCursor(2, 0);
  lcd.print("GOOD EVENING");
  delay(2000);
  lcd.clear();
  delay(500);
  lcd.setCursor(3, 0);
  lcd.print("WELCOME TO");
  for (int i = 0; i < 10; i++)
  {
    lcd.setCursor(10, 1);
    lcd.print("      ");
    // lcd.clear();
    delay(500);
    lcd.setCursor(0, 1);
    lcd.print("HACK5 BGH TEAM13");
    delay(500);
  }
  lcd.clear();
  //lcd.setCursor(0, 0);
  lcd.print("HAVE A SAFE RIDE");
}

void init_i2c()
{
  // join I2C bus (I2Cdev library doesn't do this automatically)
#if I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE
  Wire.begin();
  Wire.setClock(400000); // 400kHz I2C clock. Comment this line if having compilation difficulties
#elif I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE
  Fastwire::setup(400, true);
#endif

  // initialize serial communication
  // (115200 chosen because it is required for Teapot Demo output, but it's
  // really up to you depending on your project)
  Serial.begin(115200);
  while (!Serial); // wait for Leonardo enumeration, others continue immediately

  // NOTE: 8MHz or slower host processors, like the Teensy @ 3.3V or Arduino
  // Pro Mini running at 3.3V, cannot handle this baud rate reliably due to
  // the baud timing being too misaligned with processor ticks. You must use
  // 38400 or slower in these cases, or use some kind of external separate
  // crystal solution for the UART timer.

  // initialize device
  Serial.println(F("Initializing I2C devices..."));
  mpu.initialize();
  pinMode(INTERRUPT_PIN, INPUT);

  // verify connection
  Serial.println(F("Testing device connections..."));
  Serial.println(mpu.testConnection() ? F("MPU6050 connection successful") : F("MPU6050 connection failed"));

  // wait for ready
  Serial.println(F("\nSend any character to start the engine : "));
  while (Serial.available() && Serial.read()); // empty buffer
  while (!Serial.available());                 // wait for data
  while (Serial.available() && Serial.read()); // empty buffer again
}

void init_dmp()
{
  // load and configure the DMP
  Serial.println(F("Initializing DMP..."));
  devStatus = mpu.dmpInitialize();

  // supply your own gyro offsets here, scaled for min sensitivity
  mpu.setXGyroOffset(220);
  mpu.setYGyroOffset(76);
  mpu.setZGyroOffset(-85);
  mpu.setZAccelOffset(1788); // 1688 factory default for my test chip

  // make sure it worked (returns 0 if so)
  if (devStatus == 0) {
    // turn on the DMP, now that it's ready
    Serial.println(F("Enabling DMP..."));
    mpu.setDMPEnabled(true);

    // enable Arduino interrupt detection
    Serial.println(F("Enabling interrupt detection (Arduino external interrupt 0)..."));
    attachInterrupt(digitalPinToInterrupt(INTERRUPT_PIN), dmpDataReady, RISING);
    mpuIntStatus = mpu.getIntStatus();

    // set our DMP Ready flag so the main loop() function knows it's okay to use it
    Serial.println(F("DMP ready! Waiting for first interrupt..."));
    dmpReady = true;

    // get expected DMP packet size for later comparison
    packetSize = mpu.dmpGetFIFOPacketSize();
  } else {
    // ERROR!
    // 1 = initial memory load failed
    // 2 = DMP configuration updates failed
    // (if it's going to break, usually the code will be 1)
    Serial.print(F("DMP Initialization failed (code "));
    Serial.print(devStatus);
    Serial.println(F(")"));
  }
}


bool send_gsm_message(String number)
{
  delay(1000);
  gsm.println("AT");
  delay(500);
  if (GSM_operational())
  {
    gsm.println("AT+CMGF=1");
    delay(500);
  }

  if (GSM_operational())
  {
    gsm.print("AT+CMGS=\"");                           // Send the SMS number
    gsm.print(number);
    gsm.println("\"");
    delay(1000);

    gsm.println("Vehicle Accident occured:");
    gsm.println("Vehicle No: KA 01 GL 5678");
    gsm.println("Registered To RAMESH G L");
    gsm.print("Latitude(N): ");             //enter latitude in msg
    //gsm.println(latitude);                  //enter latitude value in msg
    gsm.print("Longitude(E): ");            //enter Longitude in Msg
    //gsm.println(logitude);                  //enter longitude value in msg
    gsm.print("http://maps.google.com/maps?&z=15&mrt=yp&t=k&q=");
    //gsm.println(latitude);
    //gsm.println("+");
    //gsm.println(logitude);
    gsm.write(0x1A);
    gsm.write(0x0D);
    gsm.write(0x0A);

    Serial.print("SMS sent :");
    Serial.print(number);
    lcd.clear();
    lcd.print("  SMS Sent TO  ");
    lcd.setCursor(0, 1);
    lcd.print(number);
    delay(2000);

    return (true); //SMS sent succussfuly
  }
  return (false);  // Failed attempt
}

//Essential command to determine the state of GSM module

bool GSM_operational(void)
{
  int count = 0;
  bool Status = false;
  gsm.println();

  while (1)
  {
    if (gsm.available() > 0)
    {
      char data = gsm.read();

      if (data == 'O' || data == 'K')       //Its working properly
      {
        Serial.println("OK");
        Status = true;
        break;
      }
      if ( data == 'E' || data == 'R' || data == 'O') // Working yet busy with some thing else
      {
        Serial.println("GSM not functional");
        Status = false;
        break;
      }
    }
    count++;
    delay(10);

    if (count == 100)
    {
      Serial.println("GSM not connected");            // No reponse for AT commands
      Status = false;
      break;
    }
  }
  return Status;
}
