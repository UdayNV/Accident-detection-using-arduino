/*   HACK5 BGH TEAM13   */
/*     IOT SAVIOURS     */
/*   Two wheeler vehicle Accident detection and rescue SOS alert through GSM and GSP module  */


/* Header file diclarations */

#include "I2Cdev.h"
#include <LiquidCrystal.h>
#include <SoftwareSerial.h>
#include "Wire.h"
#include "MPU6050_6Axis_MotionApps20.h"
#include "MPU6050.h" // not necessary if using MotionApps include file
#include <TinyGPS++.h>

/* #define declaration */

#define OUTPUT_READABLE_YAWPITCHROLL
#define INTERRUPT_PIN 2             // Interrupt Pin 0
#define LED_PIN 13                  // Inbuilt LED Pin
#define INC_SPEED A0                // PUSH BUTTON
#define DEC_SPEED A1                // PUSH BUTTON
#define BUZZER A2                   // BUZZER pin
#define GPS_GSM_Baud 9600           // baud rate for GSM and GPS
#define SERIAL_PRINTS               // enable if you want serial prints 
//#define LCD_PRINTS                  // enable if you want LCD prints

/* Hardware Pin mapping */
LiquidCrystal lcd(8, 9, 10, 11, 12, 13); // RS, E, D4, D5, D6, D7
SoftwareSerial gsm(6, 5); // GSM RX, GSM TX
//SoftwareSerial gps_serial(4, 3); // 4 Rx, 3 Tx

/* Library Mapping */
TinyGPSPlus gps;
MPU6050 mpu;

/* globle variable declaration */
bool blinkState = false;
float latitude = 0;
float logitude = 0;

// the following variables are unsigned longs because the time, measured in
// milliseconds, will quickly become a bigger number than can be stored in an int.
unsigned long lastIncDebounceTime = 0;  // the last time the output pin was toggled
unsigned long debounceDelay = 100;    // the debounce time; increase if the output flickers
int Speed = 0;

// MPU control/status vars
bool dmpReady = false;  // set true if DMP init was successful
uint8_t mpuIntStatus;   // holds actual interrupt status byte from MPU
uint8_t devStatus;      // return status after each device operation (0 = success, !0 = error)
uint16_t packetSize;    // expected DMP packet size (default is 42 bytes)
uint16_t fifoCount;     // count of all bytes currently in FIFO
uint8_t fifoBuffer[64]; // FIFO storage buffer
float Accident_detect_range = 50 * M_PI / 180;

// orientation/motion vars
Quaternion q;           // [w, x, y, z]         quaternion container
//VectorInt16 aa;         // [x, y, z]            accel sensor measurements
//VectorInt16 aaReal;     // [x, y, z]            gravity-free accel sensor measurements
//VectorInt16 aaWorld;    // [x, y, z]            world-frame accel sensor measurements
VectorFloat gravity;    // [x, y, z]            gravity vector
//float euler[3];         // [psi, theta, phi]    Euler angle container
float ypr[3];           // [yaw, pitch, roll]   yaw/pitch/roll container and gravity vector


// packet structure for InvenSense teapot demo
//uint8_t teapotPacket[14] = { '$', 0x02, 0, 0, 0, 0, 0, 0, 0, 0, 0x00, 0x00, '\r', '\n' };

// ================================================================
// ===               INTERRUPT DETECTION ROUTINE                ===
// ================================================================

volatile bool mpuInterrupt = false;     // indicates whether MPU interrupt pin has gone high
void dmpDataReady() {
  mpuInterrupt = true;
}

void(* resetFunc)(void) = 0;  // soft reset to restart the board

/* =========================================================================
   NOTE:

   In addition to connection 3.3v, GND, SDA, and SCL, this sketch
   depends on the MPU-6050's INT pin being connected to the Arduino's
   external interrupt #0 pin. On the Arduino Uno and Mega 2560, this is
   digital I/O pin 2.

   ========================================================================= */

// ================================================================
// ===                      INITIAL SETUP                       ===
// ================================================================

void setup() {
  lcd.begin(16, 2);
  lcd.clear();
  gsm.begin(GPS_GSM_Baud);
  //gps_serial.begin(GPS_GSM_Baud);

  // configure PUSH Buttons as INPUT
  pinMode(INC_SPEED, INPUT);
  pinMode(DEC_SPEED, INPUT);

  // configure BUZZER as output
  pinMode(BUZZER, OUTPUT);

  // configure LED for output
  pinMode(LED_PIN, OUTPUT);

  /* basic init functions */
  lcd_init();
  init_i2c();
  init_dmp();

  lastIncDebounceTime = millis();
  lcd.clear();
  lcd.print("HAVE A SAFE RIDE");
  lcd.setCursor(0, 1);
  lcd.print("ENGINE ON");
  delay(2000);
}

// ================================================================
// ===                    MAIN PROGRAM LOOP                     ===
// ================================================================

void loop() {

  // read the state of the switch into a local variable:
  int inc_pin = digitalRead(INC_SPEED);
  int dec_pin = digitalRead(DEC_SPEED);

  /* DebounceDelay time intraducing to the push buttons */
  if ((millis() - lastIncDebounceTime) > debounceDelay) {
    // whatever the reading is at, it's been there for longer than the debounce
    // delay, so take it as the actual current state:
    if (inc_pin && Speed < 150) {
      Speed += 10;
    } else if (dec_pin && (Speed >= 10)) {
      Speed -= 10;
    }
    lastIncDebounceTime = millis();
  }

  lcd.setCursor(0, 1);
  lcd.print("SPEED :    ");
  lcd.setCursor(8, 1);
  lcd.print(Speed);

  // if programming failed, don't try to do anything
  if (!dmpReady) return;

  // wait for MPU interrupt or extra packet(s) available
  while (!mpuInterrupt && fifoCount < packetSize);

  // reset interrupt flag and get INT_STATUS byte
  mpuInterrupt = false;
  mpuIntStatus = mpu.getIntStatus();

  // get current FIFO count
  fifoCount = mpu.getFIFOCount();

  // check for overflow (this should never happen unless our code is too inefficient)
  if ((mpuIntStatus & 0x10) || fifoCount == 1024) {
    // reset so we can continue cleanly
    mpu.resetFIFO();

#ifdef SERIAL_PRINTS
    Serial.println(F("FIFO overflow!"));
#endif
    while (Serial.available() && Serial.read()); // clear the buffer if overflow

    // otherwise, check for DMP data ready interrupt (this should happen frequently)
  } else if (mpuIntStatus & 0x02) {
    // wait for correct available data length, should be a VERY short wait
    while (fifoCount < packetSize) fifoCount = mpu.getFIFOCount();

    // read a packet from FIFO
    mpu.getFIFOBytes(fifoBuffer, packetSize);

    // track FIFO count here in case there is > 1 packet available
    // (this lets us immediately read more without waiting for an interrupt)
    fifoCount -= packetSize;

#ifdef OUTPUT_READABLE_YAWPITCHROLL
    // display Euler angles in degrees
    mpu.dmpGetQuaternion(&q, fifoBuffer);
    mpu.dmpGetGravity(&gravity, &q);
    mpu.dmpGetYawPitchRoll(ypr, &q, &gravity);
#ifdef SERIAL_PRINTS
    //Serial.print("ypr\t");
    //Serial.print(ypr[0] * 180 / M_PI);
    //Serial.print("\t");
    Serial.print(ypr[1] * 180 / M_PI);
    Serial.print("\t");
    Serial.println(ypr[2] * 180 / M_PI);
#endif
#ifdef LCD_PRINTS
    lcd.clear();
    lcd.print(ypr[1] * 180 / M_PI);
    lcd.setCursor(8, 0);
    lcd.print(ypr[2] * 180 / M_PI);
#endif
#endif

    // blink LED to indicate activity
    blinkState = !blinkState;
    digitalWrite(LED_PIN, blinkState);

    if ((ypr[1] >= Accident_detect_range || ypr[1] <= -Accident_detect_range || ypr[2] >= Accident_detect_range || ypr[2] <= -Accident_detect_range) && Speed) {
      digitalWrite(BUZZER, HIGH);      // turn on the buzzer
      for (int i = 0; i < 3; i++)
      {
        lcd.clear();
        //lcd.setCursor(0, 0);
        //lcd_print(0, 0, "VEHICLE MET WITH", 0);
        lcd.print("VEHICLE MET WITH");
        //lcd_print(0, 1, "  AN ACCIDENT  ", 3000);
        lcd.setCursor(0, 1);
        lcd.print("  AN ACCIDENT  ");
        delay(3000);
        lcd.clear();
        lcd.setCursor(0, 0);
        //lcd_print(0, 0, "PRESS RST BUTTON", 0);
        //lcd_print(0, 1, "IF YOU ARE SAFE", 3000);
        lcd.print("PRESS RST BUTTON");
        lcd.setCursor(0, 1);
        lcd.print("IF YOU ARE SAFE");
        delay(3000);
      }
      delay(1000);
      digitalWrite(BUZZER, LOW);          // trun off the buzzer
      lcd.clear();
      //lcd.setCursor(0, 0);
      lcd.print("   EMERGENCY   ");
      lcd.setCursor(0, 1);
      lcd.print("RESCUE ACTIVATE");
      delay(3000);
      Get_gps_location();                // get the GPS Location
      digitalWrite(4, LOW);
      delay(1000);
      while (gsm.available() && gsm.read()); // clear the buffer
      while (Serial.available() && Serial.read()); // clear the serial buffer
      if (!(send_gsm_message("918431826967"))) // Send the rescue SOS through GSM
      { lcd.clear();
        lcd.print("GSM not Working");
        delay(2000);
      }
      //send_gsm_message("918105531029");
      //delay(2000);
      //send_gsm_message("919740030753");
      //delay(2000);
      lcd.clear();
      //lcd.setCursor(0, 0);

      Speed = 0;                        // make Speed 0 and turn off the vehicle
      resetFunc();                      // call the reset function
      lcd.print("SYSTEM RESTARTED");
      lcd.setCursor(0, 1);
      lcd.print("TURN OFF ENGINE");
      delay(3000);
    }
  }
}

/*
  void lcd_print(int cur, int line, String message, int duration) {
  lcd.setCursor(cur, line);
  lcd.print(message);
  if (duration) {
    delay(duration);
  }
  } */

void lcd_init()
{
#ifdef SERIAL_PRINTS
  Serial.println("Initializing LCD display...");
#endif
  lcd.setCursor(2, 0);
  lcd.print("GOOD EVENING");
  delay(2000);
  lcd.clear();
  delay(500);
  lcd.setCursor(3, 0);
  lcd.print("WELCOME TO");
  for (int i = 0; i < 10; i++)
  {
    lcd.setCursor(10, 1);
    lcd.print("      ");
    // lcd.clear();
    delay(500);
    lcd.setCursor(0, 1);
    lcd.print("HACK5 BGH TEAM13");
    delay(500);
  }
}

void init_i2c()
{
  // join I2C bus (I2Cdev library doesn't do this automatically)
#if I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE
  Wire.begin();
  Wire.setClock(400000); // 400kHz I2C clock. Comment this line if having compilation difficulties
#elif I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE
  Fastwire::setup(400, true);
#endif

  // initialize serial communication
  // (115200 chosen because it is required for Teapot Demo output, but it's
  // really up to you depending on your project)
  Serial.begin(115200);
  while (!Serial); // wait for Leonardo enumeration, others continue immediately

  // NOTE: 8MHz or slower host processors, like the Teensy @ 3.3V or Arduino
  // Pro Mini running at 3.3V, cannot handle this baud rate reliably due to
  // the baud timing being too misaligned with processor ticks. You must use
  // 38400 or slower in these cases, or use some kind of external separate
  // crystal solution for the UART timer.

  // initialize device
  Serial.println(F("Initializing I2C devices..."));
  mpu.initialize();
  pinMode(INTERRUPT_PIN, INPUT);

  // verify connection
  Serial.println(F("Testing device connections..."));
  Serial.println(mpu.testConnection() ? F("MPU6050 connection successful") : F("MPU6050 connection failed"));

  Serial.println("Wating to start the engine");
  lcd.clear();
  lcd.print("START THE ENGINE");
  lcd.setCursor(0, 1);
  lcd.print("BY PUSH BUTTON *");
  while (!(digitalRead(INC_SPEED) || digitalRead(DEC_SPEED))) {}; // waiting for push button to start the engine
}

void init_dmp()
{
#ifdef SERIAL_PRINTS
  // load and configure the DMP
  Serial.println("Initializing DMP...");
#endif
  devStatus = mpu.dmpInitialize();

  // supply your own gyro offsets here, scaled for min sensitivity
  mpu.setXGyroOffset(220);
  mpu.setYGyroOffset(76);
  mpu.setZGyroOffset(-85);
  mpu.setZAccelOffset(1788); // 1688 factory default for my test chip

  // make sure it worked (returns 0 if so)
  if (devStatus == 0) {
    // turn on the DMP, now that it's ready
#ifdef SERIAL_PRINTS
    Serial.println("Enabling DMP...");
#endif
    mpu.setDMPEnabled(true);

    // enable Arduino interrupt detection
#ifdef SERIAL_PRINTS
    Serial.println("Enabling interrupt detection (Arduino external interrupt 0)...");
#endif
    attachInterrupt(digitalPinToInterrupt(INTERRUPT_PIN), dmpDataReady, RISING);
    mpuIntStatus = mpu.getIntStatus();

    // set our DMP Ready flag so the main loop() function knows it's okay to use it
#ifdef SERIAL_PRINTS
    Serial.println("DMP ready! Waiting for first interrupt...");
#endif
    dmpReady = true;

    // get expected DMP packet size for later comparison
    packetSize = mpu.dmpGetFIFOPacketSize();
  } else {
    // ERROR!
    // 1 = initial memory load failed
    // 2 = DMP configuration updates failed
    // (if it's going to break, usually the code will be 1)
#ifdef SERIAL_PRINTS
    Serial.print(F("DMP Initialization failed (code "));
    Serial.print(devStatus);
    Serial.println(F(")"));
#endif
  }
}

void Get_gps_location()
{
  SoftwareSerial gps_serial(4, 3); // 4 Rx, 3 Tx
  gps_serial.begin(GPS_GSM_Baud);
  int temp = 1;
  lcd.clear();
  while (temp)
  {
    while (gps_serial.available() > 0) {
      if (gps.encode(gps_serial.read())) {
        if (gps.location.isValid()) {
          lcd.setCursor(0, 0);
          lcd.print(latitude = gps.location.lat(), 6);
          lcd.setCursor(0, 1);
          lcd.print(logitude = gps.location.lng(), 6);
          delay(2000);

#ifdef SERIAL_PRINTS
          Serial.print(logitude = gps.location.lng(), 6);
          Serial.print(latitude = gps.location.lat(), 6);
#endif
          temp = 0;
        }
      }
    }
    if (millis() > 5000 && gps.charsProcessed() < 10)
    {
      lcd.print("No GPS detected:");
      lcd.setCursor(0, 1);
      for (int i = 0; i <= 3; i++)
      {
        lcd.setCursor(0, 1);
        if (i / 2)
          lcd.print("INC BTN to CONTI");
        else
          lcd.print("DEC BTN to RESET");
        delay(1000);
      }

      int inc = 0, dec = 0;
      unsigned long lastTime;
      lastTime = millis();
      while (millis() - lastTime > 5000 || (inc = digitalRead(INC_SPEED)) || (dec = digitalRead(INC_SPEED)))
      {
        if (dec)
          resetFunc();                      // call the reset function
        else
          return;
      }
    }
  }
}

bool send_gsm_message(String number)
{
  delay(1000);
  gsm.println("AT");
  delay(500);
  //if (GSM_operational())
  //{
  gsm.println("AT+CMGF=1");
  delay(500);
  //}

  //if (GSM_operational())
  //{
  gsm.print("AT+CMGS=\"");                           // Send the SMS number
  gsm.print(number);
  gsm.println("\"");
  delay(1000);

  gsm.println("Vehicle Accident occured:");
  gsm.println("Vehicle No: KA 01 GL 5678");
  gsm.println("Registered To RAMESH G L");
  gsm.print("Latitude(N): ");             //enter latitude in msg
  gsm.println(latitude, 6);                  //enter latitude value in msg
  Serial.print("Latitude(N): ");             //enter latitude in msg
  Serial.println(latitude, 6);                  //enter latitude value in msg
  gsm.print("Longitude(E): ");            //enter Longitude in Msg
  gsm.println(logitude, 6); //enter longitude value in msg
  Serial.print("Longitude(E): ");            //enter Longitude in Msg
  Serial.println(logitude, 6);                  //enter longitude value in msg
  gsm.print("http://maps.google.com/maps?q=loc:");
  gsm.print(latitude, 6);
  gsm.print(",");
  gsm.println(logitude, 6);
  gsm.write(0x1A);
  gsm.write(0x0D);
  gsm.write(0x0A);

  Serial.print("SMS sent :");
  Serial.print(number);
  lcd.clear();
  lcd.print("  SMS Sent TO  ");
  lcd.setCursor(0, 1);
  lcd.print(number);
  delay(2000);

  return (true); //SMS sent succussfuly
  //}
  //return (false);  // Failed attempt
}

//Essential command to determine the state of GSM module

bool GSM_operational(void)
{
  int count = 0;
  bool Status = false;
  gsm.println();

  while (1)
  {
    lcd.clear();
    if (gsm.available() > 0)
    {
      char data = gsm.read();

      if (data == 'O' || data == 'K')       //Its working properly
      {
#ifdef SERIAL_PRINTS
        Serial.println("OK");
#endif
        Status = true;
        break;
      }
      if ( data == 'E' || data == 'R' || data == 'O') // Working yet busy with some thing else
      {
#ifdef SERIAL_PRINTS
        Serial.println("GSM not functional");
#endif
#ifdef LCD_PRINTS
        lcd.print("GSM not working");
        delay(1000);
#endif
        Status = false;
        break;
      }
    }
    count++;
    delay(10);

    if (count == 100)
    {
#ifdef SERIAL_PRINTS
      Serial.println("GSM not connected");
#endif
#ifdef LCD_PRINTS
      lcd.print("GSM not Wired");
      delay(1000);// No reponse for AT commands
#endif
      Status = false;
      break;
    }
  }
  return Status;
}
